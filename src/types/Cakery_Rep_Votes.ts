/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace Cakery_Entities {
  export type VoteStructStruct = {
    proposalKey: PromiseOrValue<BytesLike>;
    memberKey: PromiseOrValue<BytesLike>;
    voteFor: PromiseOrValue<boolean>;
  };

  export type VoteStructStructOutput = [string, string, boolean] & {
    proposalKey: string;
    memberKey: string;
    voteFor: boolean;
  };
}

export interface Cakery_Rep_VotesInterface extends utils.Interface {
  functions: {
    "existsVote(bytes32)": FunctionFragment;
    "getVoteAtIndex(uint256)": FunctionFragment;
    "getVoteCount()": FunctionFragment;
    "getVote_(bytes32)": FunctionFragment;
    "newVote(bytes32,bytes32,bytes32,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "existsVote"
      | "getVoteAtIndex"
      | "getVoteCount"
      | "getVote_"
      | "newVote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "existsVote",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteAtIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoteCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVote_",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "newVote",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "existsVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVoteAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote_", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "newVote", data: BytesLike): Result;

  events: {
    "LogNewVote(address,bytes32,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNewVote"): EventFragment;
}

export interface LogNewVoteEventObject {
  sender: string;
  proposalKey: string;
  voteFor: boolean;
}
export type LogNewVoteEvent = TypedEvent<
  [string, string, boolean],
  LogNewVoteEventObject
>;

export type LogNewVoteEventFilter = TypedEventFilter<LogNewVoteEvent>;

export interface Cakery_Rep_Votes extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Cakery_Rep_VotesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    existsVote(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getVoteAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { key: string }>;

    getVoteCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getVote_(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[Cakery_Entities.VoteStructStructOutput]>;

    newVote(
      key: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  existsVote(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getVoteAtIndex(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

  getVote_(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Cakery_Entities.VoteStructStructOutput>;

  newVote(
    key: PromiseOrValue<BytesLike>,
    proposalKey: PromiseOrValue<BytesLike>,
    memberKey: PromiseOrValue<BytesLike>,
    voteFor: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    existsVote(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getVoteAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVote_(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Cakery_Entities.VoteStructStructOutput>;

    newVote(
      key: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "LogNewVote(address,bytes32,bool)"(
      sender?: null,
      proposalKey?: null,
      voteFor?: null
    ): LogNewVoteEventFilter;
    LogNewVote(
      sender?: null,
      proposalKey?: null,
      voteFor?: null
    ): LogNewVoteEventFilter;
  };

  estimateGas: {
    existsVote(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    getVote_(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newVote(
      key: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    existsVote(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteAtIndex(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoteCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVote_(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newVote(
      key: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
