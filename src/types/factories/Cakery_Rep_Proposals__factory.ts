/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  Cakery_Rep_Proposals,
  Cakery_Rep_ProposalsInterface,
} from "../Cakery_Rep_Proposals";
import type { PromiseOrValue } from "../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "uuid",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "doc_cid",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "ref_id",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "total",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "nVotes",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "nVotesFor",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "nVotesRequired",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "enum Cakery_Entities.ProposalType",
        name: "proposalType",
        type: "uint8",
      },
    ],
    name: "LogNewProposal",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "LogRemProposal",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "uuid",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "doc_cid",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "ref_id",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "total",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "nVotes",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "nVotesFor",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "nVotesRequired",
        type: "uint16",
      },
      {
        indexed: false,
        internalType: "enum Cakery_Entities.ProposalType",
        name: "proposalType",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "enum Cakery_Entities.DecisionStatus",
        name: "decisionStatus",
        type: "uint8",
      },
    ],
    name: "LogUpdateProposal",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "existsProposal",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getProposalAtIndex",
    outputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getProposalCount",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalKey",
        type: "bytes32",
      },
    ],
    name: "getProposalVotes",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "array",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getProposal_",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "proposalKey",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "orgKey",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "memberKey",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "uuid",
            type: "string",
          },
          {
            internalType: "string",
            name: "doc_cid",
            type: "string",
          },
          {
            internalType: "string",
            name: "ref_id",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "total",
            type: "uint256",
          },
          {
            internalType: "uint16",
            name: "nVotes",
            type: "uint16",
          },
          {
            internalType: "enum Cakery_Entities.ProposalType",
            name: "proposalType",
            type: "uint8",
          },
          {
            internalType: "enum Cakery_Entities.DecisionStatus",
            name: "decision",
            type: "uint8",
          },
        ],
        internalType: "struct Cakery_Entities.ProposalReturn",
        name: "r",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "proposalKey",
        type: "bytes32",
      },
    ],
    name: "getVotesCount",
    outputs: [
      {
        internalType: "uint16",
        name: "votes",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "votesFor",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "votesRequired",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "orgKey",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "memberKey",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "uuid",
        type: "string",
      },
      {
        internalType: "string",
        name: "doc_cid",
        type: "string",
      },
      {
        internalType: "string",
        name: "ref_id",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "total",
        type: "uint256",
      },
      {
        internalType: "uint16",
        name: "votesRequired",
        type: "uint16",
      },
      {
        internalType: "enum Cakery_Entities.ProposalType",
        name: "proposalType",
        type: "uint8",
      },
    ],
    name: "newProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "remProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "voteKey",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "proposalKey",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "memberKey",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "voteFor",
        type: "bool",
      },
    ],
    name: "voteAdd",
    outputs: [
      {
        internalType: "enum Cakery_Entities.ProposalType",
        name: "action",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611739806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80638b979f5111610076578063befd4cc01161005b578063befd4cc014610172578063bff28ea814610192578063c08cc02d146101b257600080fd5b80638b979f511461013e578063be2cf09a1461015f57600080fd5b8063066cc72e146100a8578063067bc56d146100bd5780636af42ce1146100e55780637ac6d9b114610106575b600080fd5b6100bb6100b6366004611125565b6101ba565b005b6100d06100cb36600461121c565b6103e7565b60405190151581526020015b60405180910390f35b6100f86100f3366004611235565b6103f9565b6040516100dc9291906112a5565b61011961011436600461121c565b610676565b6040805161ffff948516815292841660208401529216918101919091526060016100dc565b61015161014c36600461121c565b610719565b6040519081526020016100dc565b6100bb61016d36600461121c565b610725565b61018561018036600461121c565b6107fd565b6040516100dc919061131d565b6101a56101a036600461121c565b610bcc565b6040516100dc919061140b565b600154610151565b6101c560008b610c9f565b60008a8152600260208181526040909220600181018c90559081018a9055885190916101f59183918b0190610f6c565b50865161020b90600383019060208a0190610f6c565b5085516102219060048301906020890190610f6c565b5084516102379060058301906020880190610f6c565b504260068201556007810184905560088101805460ff198116825583919061ffff191661010083600381111561026f5761026f61127b565b0217905550828160080160026101000a81548161ffff021916908361ffff16021790555060018160080160046101000a81548161ffff021916908361ffff16021790555080600a0189908060018154018082558091505060019003906000526020600020016000909190919091505560018160090160008b815260200190815260200160002060006101000a81548160ff021916908315150217905550600181600b0160006101000a81548161ffff021916908361ffff160217905550600181600c0160008b815260200190815260200160002060006101000a81548160ff0219169083151502179055507fa163816913091132447c0758531d2ada4c725d9c8d508a966d0d1ce2604b2d87338c8a8a8a8a8a8860080160049054906101000a900461ffff1689600b0160009054906101000a900461ffff168c8b60080160019054906101000a900460ff166040516103d29b9a9998979695949392919061144f565b60405180910390a15050505050505050505050565b60006103f38183610dc9565b92915050565b6000806104068186610dc9565b61047d5760405162461bcd60e51b815260206004820152602c60248201527f43616e27742061646420746f20616e2050726f706f73616c207468617420646f60448201527f65736e27742065786973742e000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600085815260026020908152604080832087845260098101909252822054909160ff909116151590036105ea5760088101546104c690640100000000900461ffff16600161151c565b60088201805461ffff929092166401000000000265ffff0000000019909216919091179055600a8101805460018181018355600092835260208084209092018a9055878352600984019091526040909120805460ff1916909117905583156105ea57600b81015461053c9061ffff16600161151c565b600b8201805461ffff191661ffff929092169190911790556000858152600c820160205260408120805460ff19166001179055600882015460ff1660028111156105885761058861127b565b036105ea576008810154600b82015461ffff6201000090920482169116106105ea5760088101805460ff19166001179081905560ff610100909104169250600383818111156105d9576105d961127b565b036105ea5760039250806007015491505b60078101546008820154600b8301546040517ff55196be767918a729776a6778a9bd6812359991eb8f54883ea1d1bb9d2041d2936106649333938c93889360038501936004860193600587019361ffff6401000000008404811693928116926201000081049091169160ff6101008304811692169061161b565b60405180910390a15094509492505050565b600080806106848185610dc9565b6106e15760405162461bcd60e51b815260206004820152602860248201527f43616e27742067657420612050726f706f73616c207468617420646f65736e276044820152673a1032bc34b9ba1760c11b6064820152608401610474565b50505060009081526002602052604090206008810154600b9091015461ffff6401000000008304811693918116926201000090041690565b60006103f38183610e19565b610730600082610e43565b6000818152600260205260408120906107498282610ff0565b600182016000905560028201600090556003820160006107699190610ff0565b610777600483016000610ff0565b610785600583016000610ff0565b6000600683018190556007830181905560088301805465ffffffffffff191690556107b490600a84019061102d565b50600b01805461ffff1916905560408051338152602081018390527fd7f2608e52db7f98db43f741283f2df3b0368f1857b06341d3aadff602fb1bf5910160405180910390a150565b61085a604080516101608101825260008082526020820181905291810182905260608082018190526080820181905260a0820181905260c082015260e0810182905261010081018290529061012082019081526020016000905290565b610865600083610dc9565b6108c25760405162461bcd60e51b815260206004820152602860248201527f43616e27742067657420612050726f706f73616c207468617420646f65736e276044820152673a1032bc34b9ba1760c11b6064820152608401610474565b6000828152600260208181526040928390206001810154918501919091529081015491830191909152805481906108f890611542565b80601f016020809104026020016040519081016040528092919081815260200182805461092490611542565b80156109715780601f1061094657610100808354040283529160200191610971565b820191906000526020600020905b81548152906001019060200180831161095457829003601f168201915b5050505050826060018190525080600301805461098d90611542565b80601f01602080910402602001604051908101604052809291908181526020018280546109b990611542565b8015610a065780601f106109db57610100808354040283529160200191610a06565b820191906000526020600020905b8154815290600101906020018083116109e957829003601f168201915b50505050508260800181905250806004018054610a2290611542565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4e90611542565b8015610a9b5780601f10610a7057610100808354040283529160200191610a9b565b820191906000526020600020905b815481529060010190602001808311610a7e57829003601f168201915b50505050508260a00181905250806005018054610ab790611542565b80601f0160208091040260200160405190810160405280929190818152602001828054610ae390611542565b8015610b305780601f10610b0557610100808354040283529160200191610b30565b820191906000526020600020905b815481529060010190602001808311610b1357829003601f168201915b505050505060c0830152600781015460e08301526008810154640100000000810461ffff16610100808501919091526101208401910460ff166003811115610b7a57610b7a61127b565b90816003811115610b8d57610b8d61127b565b905250600881015461014083019060ff166002811115610baf57610baf61127b565b90816002811115610bc257610bc261127b565b8152505050919050565b6060610bd9600083610dc9565b610c365760405162461bcd60e51b815260206004820152602860248201527f43616e27742067657420612050726f706f73616c207468617420646f65736e276044820152673a1032bc34b9ba1760c11b6064820152608401610474565b600082815260026020908152604091829020600a81018054845181850281018501909552808552919392909190830182828015610c9257602002820191906000526020600020905b815481526020019060010190808311610c7e575b5050505050915050919050565b6000819003610d165760405162461bcd60e51b815260206004820152602860248201527f556e6f7264657265644b65795365742831303029202d204b65792063616e6e6f60448201527f74206265203078300000000000000000000000000000000000000000000000006064820152608401610474565b610d208282610dc9565b15610d935760405162461bcd60e51b815260206004820152603560248201527f556e6f7264657265644b65795365742831303129202d204b657920616c72656160448201527f64792065786973747320696e20746865207365742e00000000000000000000006064820152608401610474565b6001808301805480830182556000828152602090200183905554610db791906116e9565b60009182526020929092526040902055565b60018201546000908103610ddf575060006103f3565b6000828152602084905260409020546001840180548492908110610e0557610e05611700565b906000526020600020015414905092915050565b6000826001018281548110610e3057610e30611700565b9060005260206000200154905092915050565b610e4d8282610dc9565b610ebf5760405162461bcd60e51b815260206004820152603560248201527f556e6f7264657265644b65795365742831303229202d204b657920646f65732060448201527f6e6f7420657869737420696e20746865207365742e00000000000000000000006064820152608401610474565b60018281018054600092610ed2916116e9565b81548110610ee257610ee2611700565b6000918252602080832090910154848352908590526040808320548284529220829055600185018054919350839183908110610f2057610f20611700565b600091825260208083209091019290925584815290859052604081205560018401805480610f5057610f50611716565b6001900381819060005260206000200160009055905550505050565b828054610f7890611542565b90600052602060002090601f016020900481019282610f9a5760008555610fe0565b82601f10610fb357805160ff1916838001178555610fe0565b82800160010185558215610fe0579182015b82811115610fe0578251825591602001919060010190610fc5565b50610fec929150611047565b5090565b508054610ffc90611542565b6000825580601f1061100c575050565b601f01602090049060005260206000209081019061102a9190611047565b50565b508054600082559060005260206000209081019061102a91905b5b80821115610fec5760008155600101611048565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261108357600080fd5b813567ffffffffffffffff8082111561109e5761109e61105c565b604051601f8301601f19908116603f011681019082821181831017156110c6576110c661105c565b816040528381528660208588010111156110df57600080fd5b836020870160208301376000602085830101528094505050505092915050565b803561ffff8116811461111157600080fd5b919050565b80356004811061111157600080fd5b6000806000806000806000806000806101408b8d03121561114557600080fd5b8a35995060208b0135985060408b0135975060608b013567ffffffffffffffff8082111561117257600080fd5b61117e8e838f01611072565b985060808d013591508082111561119457600080fd5b6111a08e838f01611072565b975060a08d01359150808211156111b657600080fd5b6111c28e838f01611072565b965060c08d01359150808211156111d857600080fd5b506111e58d828e01611072565b94505060e08b013592506111fc6101008c016110ff565b915061120b6101208c01611116565b90509295989b9194979a5092959850565b60006020828403121561122e57600080fd5b5035919050565b6000806000806080858703121561124b57600080fd5b8435935060208501359250604085013591506060850135801515811461127057600080fd5b939692955090935050565b634e487b7160e01b600052602160045260246000fd5b600481106112a1576112a161127b565b9052565b604081016112b38285611291565b8260208301529392505050565b6000815180845260005b818110156112e6576020818501810151868301820152016112ca565b818111156112f8576000602083870101525b50601f01601f19169290920160200192915050565b600381106112a1576112a161127b565b602081528151602082015260208201516040820152604082015160608201526000606083015161016080608085015261135a6101808501836112c0565b91506080850151601f19808685030160a087015261137884836112c0565b935060a08701519150808685030160c087015261139584836112c0565b935060c08701519150808685030160e0870152506113b383826112c0565b92505060e08501516101008181870152808701519150506101206113dc8187018361ffff169052565b86015190506101406113f086820183611291565b86015190506114018583018261130d565b5090949350505050565b6020808252825182820181905260009190848201906040850190845b8181101561144357835183529284019291840191600101611427565b50909695505050505050565b600061016073ffffffffffffffffffffffffffffffffffffffff8e1683528c60208401528060408401526114858184018d6112c0565b90508281036060840152611499818c6112c0565b905082810360808401526114ad818b6112c0565b905082810360a08401526114c1818a6112c0565b9150508660c083015261ffff80871660e0840152808616610100840152808516610120840152506114f6610140830184611291565b9c9b505050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600061ffff80831681851680830382111561153957611539611506565b01949350505050565b600181811c9082168061155657607f821691505b60208210810361157657634e487b7160e01b600052602260045260246000fd5b50919050565b8054600090600181811c908083168061159657607f831692505b602080841082036115b757634e487b7160e01b600052602260045260246000fd5b838852602088018280156115d257600181146115e35761160e565b60ff1987168252828201975061160e565b60008981526020902060005b87811015611608578154848201529086019084016115ef565b83019850505b5050505050505092915050565b600061018073ffffffffffffffffffffffffffffffffffffffff8f1683528d60208401528060408401526116518184018e61157c565b90508281036060840152611665818d61157c565b90508281036080840152611679818c61157c565b905082810360a084015261168d818b61157c565b9150508760c083015261ffff871660e08301526116b161010083018761ffff169052565b61ffff85166101208301526116ca610140830185611291565b6116d861016083018461130d565b9d9c50505050505050505050505050565b6000828210156116fb576116fb611506565b500390565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fdfea164736f6c634300080d000a";

type Cakery_Rep_ProposalsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Cakery_Rep_ProposalsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cakery_Rep_Proposals__factory extends ContractFactory {
  constructor(...args: Cakery_Rep_ProposalsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Cakery_Rep_Proposals> {
    return super.deploy(overrides || {}) as Promise<Cakery_Rep_Proposals>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Cakery_Rep_Proposals {
    return super.attach(address) as Cakery_Rep_Proposals;
  }
  override connect(signer: Signer): Cakery_Rep_Proposals__factory {
    return super.connect(signer) as Cakery_Rep_Proposals__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Cakery_Rep_ProposalsInterface {
    return new utils.Interface(_abi) as Cakery_Rep_ProposalsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Cakery_Rep_Proposals {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as Cakery_Rep_Proposals;
  }
}
