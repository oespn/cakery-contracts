/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  Cakery_Rep_Votes,
  Cakery_Rep_VotesInterface,
} from "../Cakery_Rep_Votes";
import type { PromiseOrValue } from "../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "voteFor",
        type: "bool",
      },
    ],
    name: "LogNewVote",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "_getVote",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "proposalKey",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "memberKey",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "voteFor",
            type: "bool",
          },
        ],
        internalType: "struct Cakery_Entities.VoteStruct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "existsVote",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "proposalKey",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "memberKey",
        type: "bytes32",
      },
      {
        internalType: "bool",
        name: "voteFor",
        type: "bool",
      },
    ],
    name: "newVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610430806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632f46129b14610046578063c7d0806314610082578063ff6033aa14610097575b600080fd5b610059610054366004610389565b6100ba565b604080518251815260208084015190820152918101511515908201526060015b60405180910390f35b6100956100903660046103a2565b61017d565b005b6100aa6100a5366004610389565b6101fd565b6040519015158152602001610079565b60408051606081018252600080825260208201819052918101919091526100e260008361020f565b61013f5760405162461bcd60e51b8152602060048201526024808201527f43616e277420676574206120566f7465207468617420646f65736e277420657860448201526334b9ba1760e11b60648201526084015b60405180910390fd5b506000908152600260208181526040928390208351606081018552815481526001820154928101929092529091015460ff1615159181019190915290565b61018860008561025f565b60008481526002602081815260409283902086815560018101869055918201805460ff1916851515908117909155835133815291820187905292810192909252907f3935192e7d095c468ff283bbf02deb5d730a35227491431d976c633864bb72479060600160405180910390a15050505050565b6000610209818361020f565b92915050565b6001820154600090810361022557506000610209565b600082815260208490526040902054600184018054849290811061024b5761024b6103e8565b906000526020600020015414905092915050565b60008190036102d65760405162461bcd60e51b815260206004820152602860248201527f556e6f7264657265644b65795365742831303029202d204b65792063616e6e6f60448201527f74206265203078300000000000000000000000000000000000000000000000006064820152608401610136565b6102e0828261020f565b156103535760405162461bcd60e51b815260206004820152603560248201527f556e6f7264657265644b65795365742831303129202d204b657920616c72656160448201527f64792065786973747320696e20746865207365742e00000000000000000000006064820152608401610136565b600180830180548083018255600082815260209020018390555461037791906103fe565b60009182526020929092526040902055565b60006020828403121561039b57600080fd5b5035919050565b600080600080608085870312156103b857600080fd5b843593506020850135925060408501359150606085013580151581146103dd57600080fd5b939692955090935050565b634e487b7160e01b600052603260045260246000fd5b60008282101561041e57634e487b7160e01b600052601160045260246000fd5b50039056fea164736f6c634300080d000a";

type Cakery_Rep_VotesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Cakery_Rep_VotesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cakery_Rep_Votes__factory extends ContractFactory {
  constructor(...args: Cakery_Rep_VotesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Cakery_Rep_Votes> {
    return super.deploy(overrides || {}) as Promise<Cakery_Rep_Votes>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Cakery_Rep_Votes {
    return super.attach(address) as Cakery_Rep_Votes;
  }
  override connect(signer: Signer): Cakery_Rep_Votes__factory {
    return super.connect(signer) as Cakery_Rep_Votes__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Cakery_Rep_VotesInterface {
    return new utils.Interface(_abi) as Cakery_Rep_VotesInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Cakery_Rep_Votes {
    return new Contract(address, _abi, signerOrProvider) as Cakery_Rep_Votes;
  }
}
