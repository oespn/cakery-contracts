/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace Cakery_Entities {
  export type ProposalReturnStruct = {
    proposalKey: PromiseOrValue<BytesLike>;
    orgKey: PromiseOrValue<BytesLike>;
    memberKey: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
    uuid: PromiseOrValue<string>;
    doc_cid: PromiseOrValue<string>;
    ref_id: PromiseOrValue<string>;
    total: PromiseOrValue<BigNumberish>;
    nVotes: PromiseOrValue<BigNumberish>;
    proposalType: PromiseOrValue<BigNumberish>;
    decision: PromiseOrValue<BigNumberish>;
  };

  export type ProposalReturnStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    number,
    number,
    number
  ] & {
    proposalKey: string;
    orgKey: string;
    memberKey: string;
    name: string;
    uuid: string;
    doc_cid: string;
    ref_id: string;
    total: BigNumber;
    nVotes: number;
    proposalType: number;
    decision: number;
  };
}

export interface Cakery_Rep_ProposalsInterface extends utils.Interface {
  functions: {
    "_getProposal(bytes32)": FunctionFragment;
    "existsProposal(bytes32)": FunctionFragment;
    "getProposalVotes(bytes32)": FunctionFragment;
    "getVotesCount(bytes32)": FunctionFragment;
    "newProposal(bytes32,bytes32,bytes32,string,string,string,string,uint256,uint16,uint8)": FunctionFragment;
    "voteAdd(bytes32,bytes32,bytes32,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_getProposal"
      | "existsProposal"
      | "getProposalVotes"
      | "getVotesCount"
      | "newProposal"
      | "voteAdd"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_getProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "existsProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalVotes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "newProposal",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteAdd",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "existsProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voteAdd", data: BytesLike): Result;

  events: {
    "LogNewProposal(address,bytes32,string,string,string,string,uint256,uint16,uint16,uint16,uint8)": EventFragment;
    "LogRemProposal(address,bytes32)": EventFragment;
    "LogUpdateProposal(address,bytes32,string,string,string,string,uint256,uint16,uint16,uint16,uint8,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogNewProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUpdateProposal"): EventFragment;
}

export interface LogNewProposalEventObject {
  sender: string;
  key: string;
  name: string;
  uuid: string;
  doc_cid: string;
  ref_id: string;
  total: BigNumber;
  nVotes: number;
  nVotesFor: number;
  nVotesRequired: number;
  proposalType: number;
}
export type LogNewProposalEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    number,
    number,
    number,
    number
  ],
  LogNewProposalEventObject
>;

export type LogNewProposalEventFilter = TypedEventFilter<LogNewProposalEvent>;

export interface LogRemProposalEventObject {
  sender: string;
  key: string;
}
export type LogRemProposalEvent = TypedEvent<
  [string, string],
  LogRemProposalEventObject
>;

export type LogRemProposalEventFilter = TypedEventFilter<LogRemProposalEvent>;

export interface LogUpdateProposalEventObject {
  sender: string;
  key: string;
  name: string;
  uuid: string;
  doc_cid: string;
  ref_id: string;
  total: BigNumber;
  nVotes: number;
  nVotesFor: number;
  nVotesRequired: number;
  proposalType: number;
  decisionStatus: number;
}
export type LogUpdateProposalEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    number,
    number,
    number,
    number,
    number
  ],
  LogUpdateProposalEventObject
>;

export type LogUpdateProposalEventFilter =
  TypedEventFilter<LogUpdateProposalEvent>;

export interface Cakery_Rep_Proposals extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Cakery_Rep_ProposalsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _getProposal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [Cakery_Entities.ProposalReturnStructOutput] & {
        r: Cakery_Entities.ProposalReturnStructOutput;
      }
    >;

    existsProposal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getProposalVotes(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { array: string[] }>;

    getVotesCount(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        votes: number;
        votesFor: number;
        votesRequired: number;
      }
    >;

    newProposal(
      key: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      uuid: PromiseOrValue<string>,
      doc_cid: PromiseOrValue<string>,
      ref_id: PromiseOrValue<string>,
      total: PromiseOrValue<BigNumberish>,
      votesRequired: PromiseOrValue<BigNumberish>,
      proposalType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteAdd(
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _getProposal(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<Cakery_Entities.ProposalReturnStructOutput>;

  existsProposal(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getProposalVotes(
    proposalKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVotesCount(
    proposalKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      votes: number;
      votesFor: number;
      votesRequired: number;
    }
  >;

  newProposal(
    key: PromiseOrValue<BytesLike>,
    orgKey: PromiseOrValue<BytesLike>,
    memberKey: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    uuid: PromiseOrValue<string>,
    doc_cid: PromiseOrValue<string>,
    ref_id: PromiseOrValue<string>,
    total: PromiseOrValue<BigNumberish>,
    votesRequired: PromiseOrValue<BigNumberish>,
    proposalType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteAdd(
    voteKey: PromiseOrValue<BytesLike>,
    proposalKey: PromiseOrValue<BytesLike>,
    memberKey: PromiseOrValue<BytesLike>,
    voteFor: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _getProposal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<Cakery_Entities.ProposalReturnStructOutput>;

    existsProposal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getProposalVotes(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVotesCount(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        votes: number;
        votesFor: number;
        votesRequired: number;
      }
    >;

    newProposal(
      key: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      uuid: PromiseOrValue<string>,
      doc_cid: PromiseOrValue<string>,
      ref_id: PromiseOrValue<string>,
      total: PromiseOrValue<BigNumberish>,
      votesRequired: PromiseOrValue<BigNumberish>,
      proposalType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteAdd(
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { action: number; value: BigNumber }>;
  };

  filters: {
    "LogNewProposal(address,bytes32,string,string,string,string,uint256,uint16,uint16,uint16,uint8)"(
      sender?: null,
      key?: null,
      name?: null,
      uuid?: null,
      doc_cid?: null,
      ref_id?: null,
      total?: null,
      nVotes?: null,
      nVotesFor?: null,
      nVotesRequired?: null,
      proposalType?: null
    ): LogNewProposalEventFilter;
    LogNewProposal(
      sender?: null,
      key?: null,
      name?: null,
      uuid?: null,
      doc_cid?: null,
      ref_id?: null,
      total?: null,
      nVotes?: null,
      nVotesFor?: null,
      nVotesRequired?: null,
      proposalType?: null
    ): LogNewProposalEventFilter;

    "LogRemProposal(address,bytes32)"(
      sender?: null,
      key?: null
    ): LogRemProposalEventFilter;
    LogRemProposal(sender?: null, key?: null): LogRemProposalEventFilter;

    "LogUpdateProposal(address,bytes32,string,string,string,string,uint256,uint16,uint16,uint16,uint8,uint8)"(
      sender?: null,
      key?: null,
      name?: null,
      uuid?: null,
      doc_cid?: null,
      ref_id?: null,
      total?: null,
      nVotes?: null,
      nVotesFor?: null,
      nVotesRequired?: null,
      proposalType?: null,
      decisionStatus?: null
    ): LogUpdateProposalEventFilter;
    LogUpdateProposal(
      sender?: null,
      key?: null,
      name?: null,
      uuid?: null,
      doc_cid?: null,
      ref_id?: null,
      total?: null,
      nVotes?: null,
      nVotesFor?: null,
      nVotesRequired?: null,
      proposalType?: null,
      decisionStatus?: null
    ): LogUpdateProposalEventFilter;
  };

  estimateGas: {
    _getProposal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    existsProposal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalVotes(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotesCount(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newProposal(
      key: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      uuid: PromiseOrValue<string>,
      doc_cid: PromiseOrValue<string>,
      ref_id: PromiseOrValue<string>,
      total: PromiseOrValue<BigNumberish>,
      votesRequired: PromiseOrValue<BigNumberish>,
      proposalType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteAdd(
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _getProposal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    existsProposal(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalVotes(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotesCount(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newProposal(
      key: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      uuid: PromiseOrValue<string>,
      doc_cid: PromiseOrValue<string>,
      ref_id: PromiseOrValue<string>,
      total: PromiseOrValue<BigNumberish>,
      votesRequired: PromiseOrValue<BigNumberish>,
      proposalType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteAdd(
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
