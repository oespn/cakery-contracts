/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  Cakery_Rep_Potents,
  Cakery_Rep_PotentsInterface,
} from "../Cakery_Rep_Potents";
import type { PromiseOrValue } from "../common";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "memberKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "power",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "percent_x_1000",
        type: "uint16",
      },
    ],
    name: "LogNewPotent",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "memberKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "proposalKey",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "power",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint16",
        name: "percent_x_1000",
        type: "uint16",
      },
    ],
    name: "LogUpdatePotent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "getPotent",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "proposalKey",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "memberKey",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "power",
            type: "uint256",
          },
          {
            internalType: "uint16",
            name: "percent",
            type: "uint16",
          },
        ],
        internalType: "struct Cakery_Entities.PotentStruct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getPotentAtIndex",
    outputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPotentCount",
    outputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "proposalKey",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "memberKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "power",
        type: "uint256",
      },
    ],
    name: "newPotent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "uint16",
        name: "percent",
        type: "uint16",
      },
    ],
    name: "updatePotentPercent",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "proposalKey",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "memberKey",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "power",
        type: "uint256",
      },
    ],
    name: "updatePotentPower",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610701806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806375cc4b181161005b57806375cc4b18146100d1578063769e339c146100e4578063accc004c146100f7578063de4262f01461010a57600080fd5b806312a3b98e1461008257806338a699a41461009757806367b2ac4c146100bf575b600080fd5b610095610090366004610617565b610154565b005b6100aa6100a5366004610649565b6101cd565b60405190151581526020015b60405180910390f35b6001545b6040519081526020016100b6565b6100c36100df366004610649565b6101df565b6100aa6100f2366004610617565b6101eb565b610095610105366004610662565b61028a565b61011d610118366004610649565b61038c565b6040516100b6919081518152602080830151908201526040808301519082015260609182015161ffff169181019190915260800190565b61015f600085610473565b600084815260026020818152604080842087815560018101879055928301859055805186815291820187905281018490526060810192909252907f44e28bcc33b1c93b5b473e1bd75e317d66c48d0077cd73c2c8e107f84afa23f79060800160405180910390a15050505050565b60006101d9818361059d565b92915050565b60006101d981836105ed565b6000806101f8818761059d565b61020c5761020886868686610154565b5060015b60008681526002602081905260409091209081015461022c9085906106af565b60028201556003810154604080518781526020810189905280820187905261ffff9092166060830152517f1253f5da91ad62da7e14f9ef80105cbfacbc8c439cee61d36f4d30bbc7c23fc89181900360800190a15095945050505050565b61029560008361059d565b61030c5760405162461bcd60e51b815260206004820152603160248201527f43616e277420757064617465206120706f74656e742070726563656e7420746860448201527f617420646f65736e27742065786973742e00000000000000000000000000000060648201526084015b60405180910390fd5b60008281526002602081815260409283902060038101805461ffff191661ffff871690811790915560018201548254948301548651918252938101949094529383019190915260608201929092527f1253f5da91ad62da7e14f9ef80105cbfacbc8c439cee61d36f4d30bbc7c23fc89060800160405180910390a1505050565b6040805160808101825260008082526020820181905291810182905260608101919091526103bb60008361059d565b61042d5760405162461bcd60e51b815260206004820152602660248201527f43616e277420676574206120506f74656e74207468617420646f65736e27742060448201527f65786973742e00000000000000000000000000000000000000000000000000006064820152608401610303565b5060009081526002602081815260409283902083516080810185528154815260018201549281019290925291820154928101929092526003015461ffff16606082015290565b60008190036104ea5760405162461bcd60e51b815260206004820152602860248201527f556e6f7264657265644b65795365742831303029202d204b65792063616e6e6f60448201527f74206265203078300000000000000000000000000000000000000000000000006064820152608401610303565b6104f4828261059d565b156105675760405162461bcd60e51b815260206004820152603560248201527f556e6f7264657265644b65795365742831303129202d204b657920616c72656160448201527f64792065786973747320696e20746865207365742e00000000000000000000006064820152608401610303565b600180830180548083018255600082815260209020018390555461058b91906106c7565b60009182526020929092526040902055565b600182015460009081036105b3575060006101d9565b60008281526020849052604090205460018401805484929081106105d9576105d96106de565b906000526020600020015414905092915050565b6000826001018281548110610604576106046106de565b9060005260206000200154905092915050565b6000806000806080858703121561062d57600080fd5b5050823594602084013594506040840135936060013592509050565b60006020828403121561065b57600080fd5b5035919050565b6000806040838503121561067557600080fd5b82359150602083013561ffff8116811461068e57600080fd5b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b600082198211156106c2576106c2610699565b500190565b6000828210156106d9576106d9610699565b500390565b634e487b7160e01b600052603260045260246000fdfea164736f6c634300080d000a";

type Cakery_Rep_PotentsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Cakery_Rep_PotentsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cakery_Rep_Potents__factory extends ContractFactory {
  constructor(...args: Cakery_Rep_PotentsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Cakery_Rep_Potents> {
    return super.deploy(overrides || {}) as Promise<Cakery_Rep_Potents>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Cakery_Rep_Potents {
    return super.attach(address) as Cakery_Rep_Potents;
  }
  override connect(signer: Signer): Cakery_Rep_Potents__factory {
    return super.connect(signer) as Cakery_Rep_Potents__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Cakery_Rep_PotentsInterface {
    return new utils.Interface(_abi) as Cakery_Rep_PotentsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Cakery_Rep_Potents {
    return new Contract(address, _abi, signerOrProvider) as Cakery_Rep_Potents;
  }
}
